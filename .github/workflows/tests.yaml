name: Tests for PROTEUS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_dispatch:

jobs:
  test:
    # if: github.event.pull_request.draft == false
    name: Run Coverage and Tests
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python-version: ['3.10', '3.12']

    env:
      FWL_DATA: /home/runner/work/fwl_data
      RAD_DIR: ./SOCRATES
      SOCRATES: ./SOCRATES  # https://github.com/FormingWorlds/JANUS/issues/51

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'false'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v4
        id: cache-virtualenv
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install -e .[develop]

      - uses: actions/cache@v4
        id: cache-fwl-data
        with:
          path: ${{ env.FWL_DATA }}
          key: fwl-data-2

      - name: Pre-download fwl data
        if: steps.cache-fwl-data.cache-hit != 'true'
        run: |
          mors download all
          proteus get stellar
          proteus get spectral
          proteus get spectral -n Frostflow -b 48

      - name: Test with pytest
        run: |
          source PROTEUS.env
          coverage run -m pytest

      - name: Upload PNG plots as artifacts
        if: failure()  # Only upload if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: png-plots
          path: |
            output/dummy/plot_elements.png
            output/dummy/plot_escape.png
            output/dummy/plot_fluxes_global.png
            output/dummy/plot_global_lin.png
            output/dummy/plot_global_log.png
            output/dummy/plot_observables.png
            output/dummy/plot_sflux.png

      - name: Report coverage
        run: |
          coverage json
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
          echo $'\n```' >> $GITHUB_STEP_SUMMARY
          coverage report >> $GITHUB_STEP_SUMMARY
          echo $'\n```' >> $GITHUB_STEP_SUMMARY

      - name: Make coverage badge
        if: ${{ github.ref == 'refs/heads/main' && matrix.python-version == '3.10' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: b4ee7dab92e20644bcb3a5ad09f71165
          filename: covbadge.svg
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
