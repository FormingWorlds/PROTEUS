name: Tests for PROTEUS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_dispatch:

jobs:
  test:
    # if: github.event.pull_request.draft == false
    name: Run Coverage and Tests
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python-version: ['3.12','3.13']
        include:
          - os: ubuntu-latest
            INSTALL_DEPS: sudo apt-get update; sudo apt-get install libnetcdff-dev netcdf-bin libssl-dev
            CC: gcc
            CXX: g++
            FC: gfortran
          - os: macos-latest
            INSTALL_DEPS: brew uninstall --force pkg-config;  rm -f /opt/homebrew/bin/pkg-config; rm -f /opt/homebrew/share/aclocal/pkg.m4; rm -f  /opt/homebrew/share/man/man1/pkg-config.1; brew install gfortran netcdf netcdf-fortran
            CC: gcc
            CXX: g++
            FC: gfortran

    env:
      FWL_DATA: ${{ github.workspace }}/fwl_data
      PROTEUS_DIR: ${{ github.workspace }}
      RAD_DIR: ${{ github.workspace }}/socrates
      AGNI_DIR: ${{ github.workspace }}/AGNI
      JULIA_NUM_THREADS: 1

    runs-on: ${{ matrix.os }}
    steps:

      # https://stackoverflow.com/a/65356209
      - name: Install system dependencies
        run: ${{ matrix.INSTALL_DEPS }}

      # MacOS only: create symbolic link for gfortran
      - name: Symlink gfortran
        if: runner.os == 'macOS'
        run: |
          if [ ! -L /opt/homebrew/bin/gfortran ]; then
            sudo ln -s /opt/homebrew/bin/gfortran-13 /opt/homebrew/bin/gfortran
          fi
          sudo ln -s /opt/homebrew/Cellar/gcc/12.*/lib/gcc/12/*.dylib /opt/homebrew/lib/ || true
          which gfortran

      # Setup Julia
      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11.3'

      - name: Cache Julia
        uses: julia-actions/cache@v2

      # Checkout PROTEUS
      - name: Checkout PROTEUS
        uses: actions/checkout@v4

      # Get Lovepy
      - name: Get Lovepy
        run: |
          ./tools/get_lovepy.sh

      # Get VULCAN
      - name: Get VULCAN
        run: |
          ./tools/get_vulcan.sh

      # Setup Python using the version defined in the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Try to restore the Python environment from the cache
      - name: Restore Python environment from cache
        uses: actions/cache@v4
        id: cache-virtualenv
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}

      - name: Install PROTEUS (repo only)
        run:
          python -m pip install -e .[develop]

      - name: Install all PROTEUS external repo dependencies via cli.py.
        run:
          proteus install-all --export-env

      # Get lookup data for PROTEUS
      - name: Get FWL data from cache
        uses: actions/cache@v4
        id: cache-fwl-data
        with:
          path: ${{ env.FWL_DATA }}
          key: fwl-data-2

      # Get FWL data
      - name: Get additional FWL data
        if: steps.cache-fwl-data.cache-hit != 'true'
        run: |
          proteus get stellar
          proteus get spectral --name Frostflow --bands 48

      # Run PROTEUS tests
      - name: Test with pytest
        run: coverage run -m pytest

      # Upload result if tests fail
      - name: Upload result as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-physical
          path: |
            output/physical/plot/plot_*.png
            output/physical/runtime_helpfile.csv

      - name: Report coverage
        run: |
          coverage json
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "Total coverage: $TOTAL"
          echo "total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
          echo $'\n```' >> $GITHUB_STEP_SUMMARY
          coverage report >> $GITHUB_STEP_SUMMARY
          echo $'\n```' >> $GITHUB_STEP_SUMMARY
          coverage report

      - name: Make coverage badge
        if: ${{ github.ref == 'refs/heads/main' && matrix.python-version == '3.13' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: b4ee7dab92e20644bcb3a5ad09f71165
          filename: covbadge.svg
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
